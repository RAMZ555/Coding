class Solution {
    public int[] plusOne(int[] digits) {
        int n = digits.length;
    for(int i =n-1;i>=0;i--){
     if(digits[i]< 9){                  // if i less than 9 no problem add i + 1 mean 3 becomes 4 otherwise set to 0
        digits[i]++;
        return digits;
     }
     digits[i]=0;
    }
     int[] result = new int[n + 1];
        result[0] = 1;                                   // All other positions default to 0
        return result;
    }
}

Problem
Given a non-empty array of decimal digits representing a non-negative integer, increment one to the integer. 
The digits are stored such that the most significant digit is at the head of the list.

Example:
Input: [1, 2, 3] → Output: [1, 2, 4]
Input: [9, 9, 9] → Output: [1, 0, 0, 0]

Approach / Pattern
Pattern: Array manipulation / Carry handling / Greedy approach
Traverse the array from last digit to first (right to left).
If digit < 9, just increment it and return the array (no carry needed).
If digit = 9, set it to 0 and continue to next left digit (carry 1).
If all digits were 9, create a new array with one extra digit, set the first element to 1, and rest are 0.
This is a greedy approach because we handle the increment locally and only create a new array if all digits are 9.

Time Complexity
O(n) — Traverse the array once from end to start.

Space Complexity
O(1) if no new array is needed (in-place).
O(n+1) in the worst case when all digits are 9 and we create a new array.
