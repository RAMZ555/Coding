class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
    
        // List to store the resulting triplets that sum to zero
        List<List<Integer>> result = new ArrayList<>();
        
    // Step 1: Sort the array to simplify finding valid triplets and avoiding duplicates
        Arrays.sort(nums);
        
    // Step 2: Iterate through the array, fixing one element at a time
    // We loop until the third-to-last element because each triplet needs three elements
        for (int i = 0; i < nums.length - 2; i++) {
            
            // Skip duplicate elements to avoid repeating triplets
            // If the current element is the same as the previous one, continue to the next element
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            
            // Step 3: Use two pointers (left and right) to find the other two numbers
            // 'left' pointer starts just after the fixed element, 'right' pointer starts at the end of the array
            int left = i + 1;
            int right = nums.length - 1;
            
            // Loop until the left pointer meets or crosses the right pointer
            while (left < right) {
                
                // Calculate the sum of the triplet (nums[i], nums[left], nums[right])
                int sum = nums[i] + nums[left] + nums[right];
                
                if (sum == 0) {
                    // If the sum is zero, we found a valid triplet
                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));
                    
                    // Move the left pointer forward to avoid duplicates
                    while (left < right && nums[left] == nums[left + 1]) {
                        left++;  // Skip over duplicates of the left element
                    }
                    
                    // Move the right pointer backward to avoid duplicates
                    while (left < right && nums[right] == nums[right - 1]) {
                        right--;  // Skip over duplicates of the right element
                    }
                    
                    // Move both pointers inward after recording a valid triplet
                    left++;
                    right--;
                } else if (sum < 0) {
// If the sum is less than zero, move the left pointer right to increase the sum
// This is because the array is sorted, so moving left will give us a larger number
                    left++;
                } else {
                    // If the sum is greater than zero, move the right pointer left to decrease the sum
                    // This reduces the sum by selecting a smaller number
                    right--;
                }
            }
        }
        
        // Return the list of triplets that sum to zero
        return result;
    }
}


/* Outer loop = O(n)
Inner loop (two-pointer) = O(n)
Total = O(n) × O(n) = O(n²)
so..
Time Complexity: O(n²)
Space Complexity: O(1) extra (ignoring output)
