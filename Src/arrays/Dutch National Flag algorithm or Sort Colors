class Solution {
    public void sortColors(int[] nums) {
        int start = 0;          // Tracks the boundary of 0s
        int mid = 0;            // Current element being processed .it scan the array element one by one
        int end = nums.length - 1;  // Tracks the boundary of 2s

        while (mid <= end) {
            if (nums[mid] == 0) {      // if current element 0 swap with start position and move start and mid ++
                swap(nums, start, mid);
                start++;
                mid++;
            } else if (nums[mid] == 1) { // it is one so correctly placed
                mid++;
            } else {  // nums[mid] == 2
                swap(nums, mid, end);
                end--;
                // Don't increment mid here because we need to check the new element
            }
        }
    }
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}


Time Complexity
The algorithm goes through the array only once (each element is checked at most once).
So, time complexity = O(n), where n is the size of the array.

Space Complexity
It uses only a few extra variables (start, mid, end), no extra array.
So, space complexity = O(1) (constant space).
